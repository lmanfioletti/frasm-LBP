     1                                  ; Lucas Manfioletti - 2020101417
     2                                  ; Sistemas Embarcados 2023/1
     3                                  
     4                                  segment code
     5                                  ..start:
     6 00000000 B8[0000]                    		mov 		ax,data
     7 00000003 8ED8                        		mov 		ds,ax
     8 00000005 B8[0000]                    		mov 		ax,stack
     9 00000008 8ED0                        		mov 		ss,ax
    10 0000000A BC[0002]                    		mov 		sp,stacktop
    11                                  
    12                                  ; salvar modo corrente de video(vendo como est� o modo de video da maquina)
    13 0000000D B40F                                mov  		ah,0Fh
    14 0000000F CD10                        		int  		10h
    15 00000011 A2[0100]                    		mov  		[modo_anterior],al   
    16                                  
    17                                  ; alterar modo de video para gr�fico 640x480 16 cores
    18 00000014 B012                        	mov     	al,12h
    19 00000016 B400                       		mov     	ah,0
    20 00000018 CD10                        	int     	10h
    21                                  
    22                                  ;draw layout base
    23 0000001A C606[0000]07            	mov		byte[cor],branco 
    24                                  	;global border
    25                                  		;bottom
    26 0000001F B80000                  			mov		ax,0
    27 00000022 50                      			push		ax
    28 00000023 B80000                  			mov		ax,0
    29 00000026 50                      			push		ax
    30 00000027 B87F02                  			mov		ax,639
    31 0000002A 50                      			push		ax
    32 0000002B B80000                  			mov		ax,0
    33 0000002E 50                      			push		ax
    34 0000002F E82306                  			call		line
    35                                  		;right
    36 00000032 B87F02                  			mov		ax,639
    37 00000035 50                      			push		ax
    38 00000036 B80000                  			mov		ax,0
    39 00000039 50                      			push		ax
    40 0000003A B87F02                  			mov		ax,639
    41 0000003D 50                      			push		ax
    42 0000003E B8DF01                  			mov		ax,479
    43 00000041 50                      			push		ax
    44 00000042 E81006                  			call		line
    45                                  		;top
    46 00000045 B87F02                  			mov		ax,639
    47 00000048 50                      			push		ax
    48 00000049 B8DF01                  			mov		ax,479
    49 0000004C 50                      			push		ax
    50 0000004D B80000                  			mov		ax,0
    51 00000050 50                      			push		ax
    52 00000051 B8DF01                  			mov		ax,479
    53 00000054 50                      			push		ax
    54 00000055 E8FD05                  			call		line
    55                                  		;left
    56 00000058 B80000                  			mov		ax,0
    57 0000005B 50                      			push		ax
    58 0000005C B8DF01                  			mov		ax,479
    59 0000005F 50                      			push		ax
    60 00000060 B80000                  			mov		ax,0
    61 00000063 50                      			push		ax
    62 00000064 B80000                  			mov		ax,0
    63 00000067 50                      			push		ax
    64 00000068 E8EA05                  			call		line
    65                                  
    66                                  	;open button
    67                                  		;border
    68                                  			;top
    69 0000006B B81300                  				mov		ax,19 ;19px
    70 0000006E 50                      				push		ax
    71 0000006F B8D001                  				mov		ax,464 ;464px
    72 00000072 50                      				push		ax
    73 00000073 B84500                  				mov		ax,69
    74 00000076 50                      				push		ax
    75 00000077 B8D001                  				mov		ax,464
    76 0000007A 50                      				push		ax
    77 0000007B E8D705                  				call		line
    78                                  			;right
    79 0000007E B84500                  				mov		ax,69
    80 00000081 50                      				push		ax
    81 00000082 B8D001                  				mov		ax,464
    82 00000085 50                      				push		ax
    83 00000086 B84500                  				mov		ax,69
    84 00000089 50                      				push		ax
    85 0000008A B89E01                  				mov		ax, 414
    86 0000008D 50                      				push		ax
    87 0000008E E8C405                  				call		line
    88                                  			;bottom
    89 00000091 B84500                  				mov		ax,69
    90 00000094 50                      				push		ax
    91 00000095 B89E01                  				mov		ax,414
    92 00000098 50                      				push		ax
    93 00000099 B81300                  				mov		ax,19
    94 0000009C 50                      				push		ax
    95 0000009D B89E01                  				mov		ax,414
    96 000000A0 50                      				push		ax
    97 000000A1 E8B105                  				call		line
    98                                  			;left
    99 000000A4 B81300                  				mov		ax,19
   100 000000A7 50                      				push		ax
   101 000000A8 B89E01                  				mov		ax,414
   102 000000AB 50                      				push		ax
   103 000000AC B81300                  				mov		ax,19
   104 000000AF 50                      				push		ax
   105 000000B0 B8D001                  				mov		ax,464
   106 000000B3 50                      				push		ax
   107 000000B4 E89E05                  				call		line
   108                                  		;text
   109 000000B7 B602                        		mov     	dh,2			;linha 0-29
   110 000000B9 B203                        		mov     	dl,3			;coluna 0-79
   111 000000BB 8D1E[0A00]              			lea bx, [btn_string_open]
   112 000000BF E8C201                  			call 	print_string
   113                                  	;LBP button
   114                                  		;border
   115                                  			;top
   116 000000C2 B84A00                  				mov		ax,74 
   117 000000C5 50                      				push		ax
   118 000000C6 B8D001                  				mov		ax,464
   119 000000C9 50                      				push		ax
   120 000000CA B87C00                  				mov		ax,124
   121 000000CD 50                      				push		ax
   122 000000CE B8D001                  				mov		ax,464
   123 000000D1 50                      				push		ax
   124 000000D2 E88005                  				call		line
   125                                  			;right
   126 000000D5 B87C00                  				mov		ax,124
   127 000000D8 50                      				push		ax
   128 000000D9 B8D001                  				mov		ax,464
   129 000000DC 50                      				push		ax
   130 000000DD B87C00                  				mov		ax,124
   131 000000E0 50                      				push		ax
   132 000000E1 B89E01                  				mov		ax, 414
   133 000000E4 50                      				push		ax
   134 000000E5 E86D05                  				call		line
   135                                  			;bottom
   136 000000E8 B87C00                  				mov		ax,124
   137 000000EB 50                      				push		ax
   138 000000EC B89E01                  				mov		ax,414
   139 000000EF 50                      				push		ax
   140 000000F0 B84A00                  				mov		ax,74
   141 000000F3 50                      				push		ax
   142 000000F4 B89E01                  				mov		ax,414
   143 000000F7 50                      				push		ax
   144 000000F8 E85A05                  				call		line
   145                                  			;left
   146 000000FB B84A00                  				mov		ax,74
   147 000000FE 50                      				push		ax
   148 000000FF B89E01                  				mov		ax,414
   149 00000102 50                      				push		ax
   150 00000103 B84A00                  				mov		ax,74
   151 00000106 50                      				push		ax
   152 00000107 B8D001                  				mov		ax,464
   153 0000010A 50                      				push		ax
   154 0000010B E84705                  				call		line
   155                                  		;text
   156 0000010E B602                        		mov     	dh,2			;linha 0-29
   157 00000110 B20A                        		mov     	dl,10			;coluna 0-79
   158 00000112 8D1E[1000]              			lea bx, [btn_string_LBP]
   159 00000116 E86B01                  			call 	print_string
   160                                  	
   161                                  	;Hist button
   162                                  		;border
   163                                  			;top
   164 00000119 B88100                  				mov		ax,129 
   165 0000011C 50                      				push		ax
   166 0000011D B8D001                  				mov		ax,464
   167 00000120 50                      				push		ax
   168 00000121 B8B300                  				mov		ax,179
   169 00000124 50                      				push		ax
   170 00000125 B8D001                  				mov		ax,464
   171 00000128 50                      				push		ax
   172 00000129 E82905                  				call		line
   173                                  			;right
   174 0000012C B8B300                  				mov		ax,179
   175 0000012F 50                      				push		ax
   176 00000130 B8D001                  				mov		ax,464
   177 00000133 50                      				push		ax
   178 00000134 B8B300                  				mov		ax,179
   179 00000137 50                      				push		ax
   180 00000138 B89E01                  				mov		ax, 414
   181 0000013B 50                      				push		ax
   182 0000013C E81605                  				call		line
   183                                  			;bottom
   184 0000013F B8B300                  				mov		ax,179
   185 00000142 50                      				push		ax
   186 00000143 B89E01                  				mov		ax,414
   187 00000146 50                      				push		ax
   188 00000147 B88100                  				mov		ax,129
   189 0000014A 50                      				push		ax
   190 0000014B B89E01                  				mov		ax,414
   191 0000014E 50                      				push		ax
   192 0000014F E80305                  				call		line
   193                                  			;left
   194 00000152 B88100                  				mov		ax,129
   195 00000155 50                      				push		ax
   196 00000156 B89E01                  				mov		ax,414
   197 00000159 50                      				push		ax
   198 0000015A B88100                  				mov		ax,129
   199 0000015D 50                      				push		ax
   200 0000015E B8D001                  				mov		ax,464
   201 00000161 50                      				push		ax
   202 00000162 E8F004                  				call		line
   203                                  		;text
   204 00000165 B602                        		mov     	dh,2			;linha 0-29
   205 00000167 B211                        		mov     	dl,17			;coluna 0-79
   206 00000169 8D1E[1400]              			lea bx, [btn_string_Hist]
   207 0000016D E81401                  			call 	print_string
   208                                  	;HistLBP button
   209                                  		;border
   210                                  			;top
   211 00000170 B8B800                  				mov		ax,184 
   212 00000173 50                      				push		ax
   213 00000174 B8D001                  				mov		ax,464
   214 00000177 50                      				push		ax
   215 00000178 B8EA00                  				mov		ax,234
   216 0000017B 50                      				push		ax
   217 0000017C B8D001                  				mov		ax,464
   218 0000017F 50                      				push		ax
   219 00000180 E8D204                  				call		line
   220                                  			;right
   221 00000183 B8EA00                  				mov		ax,234
   222 00000186 50                      				push		ax
   223 00000187 B8D001                  				mov		ax,464
   224 0000018A 50                      				push		ax
   225 0000018B B8EA00                  				mov		ax,234
   226 0000018E 50                      				push		ax
   227 0000018F B89E01                  				mov		ax, 414
   228 00000192 50                      				push		ax
   229 00000193 E8BF04                  				call		line
   230                                  			;bottom
   231 00000196 B8EA00                  				mov		ax,234
   232 00000199 50                      				push		ax
   233 0000019A B89E01                  				mov		ax,414
   234 0000019D 50                      				push		ax
   235 0000019E B8B800                  				mov		ax,184
   236 000001A1 50                      				push		ax
   237 000001A2 B89E01                  				mov		ax,414
   238 000001A5 50                      				push		ax
   239 000001A6 E8AC04                  				call		line
   240                                  			;left
   241 000001A9 B8B800                  				mov		ax,184
   242 000001AC 50                      				push		ax
   243 000001AD B89E01                  				mov		ax,414
   244 000001B0 50                      				push		ax
   245 000001B1 B8B800                  				mov		ax,184
   246 000001B4 50                      				push		ax
   247 000001B5 B8D001                  				mov		ax,464
   248 000001B8 50                      				push		ax
   249 000001B9 E89904                  				call		line
   250                                  		;text
   251 000001BC B601                        		mov     	dh,1			;linha 0-29
   252 000001BE B218                        		mov     	dl,24			;coluna 0-79
   253 000001C0 8D1E[1900]              			lea bx, [btn_string_HistLBP]
   254 000001C4 E8BD00                  			call 	print_string
   255 000001C7 B602                    			mov     	dh,2			;linha 0-29
   256 000001C9 B218                        		mov     	dl,24			;coluna 0-79
   257 000001CB 43                      			inc		bx
   258 000001CC E8B500                  			call 	print_string
   259                                  
   260                                  	;exit button
   261                                  		;border
   262                                  			;top
   263 000001CF B8EF00                  				mov		ax,239 
   264 000001D2 50                      				push		ax
   265 000001D3 B8D001                  				mov		ax,464
   266 000001D6 50                      				push		ax
   267 000001D7 B82101                  				mov		ax,289
   268 000001DA 50                      				push		ax
   269 000001DB B8D001                  				mov		ax,464
   270 000001DE 50                      				push		ax
   271 000001DF E87304                  				call		line
   272                                  			;right
   273 000001E2 B82101                  				mov		ax,289
   274 000001E5 50                      				push		ax
   275 000001E6 B8D001                  				mov		ax,464
   276 000001E9 50                      				push		ax
   277 000001EA B82101                  				mov		ax,289
   278 000001ED 50                      				push		ax
   279 000001EE B89E01                  				mov		ax, 414
   280 000001F1 50                      				push		ax
   281 000001F2 E86004                  				call		line
   282                                  			;bottom
   283 000001F5 B82101                  				mov		ax,289
   284 000001F8 50                      				push		ax
   285 000001F9 B89E01                  				mov		ax,414
   286 000001FC 50                      				push		ax
   287 000001FD B8EF00                  				mov		ax,239
   288 00000200 50                      				push		ax
   289 00000201 B89E01                  				mov		ax,414
   290 00000204 50                      				push		ax
   291 00000205 E84D04                  				call		line
   292                                  			;left
   293 00000208 B8EF00                  				mov		ax,239
   294 0000020B 50                      				push		ax
   295 0000020C B89E01                  				mov		ax,414
   296 0000020F 50                      				push		ax
   297 00000210 B8EF00                  				mov		ax,239
   298 00000213 50                      				push		ax
   299 00000214 B8D001                  				mov		ax,464
   300 00000217 50                      				push		ax
   301 00000218 E83A04                  				call		line
   302                                  		;text
   303 0000021B B602                        		mov     	dh,2			;linha 0-29
   304 0000021D B21F                        		mov     	dl,31			;coluna 0-79
   305 0000021F 8D1E[2200]              			lea bx, [btn_string_exit]
   306 00000223 E85E00                  			call 	print_string
   307                                  	;footer
   308                                  		;border
   309                                  			;top
   310 00000226 B81300                  				mov		ax,19 
   311 00000229 50                      				push		ax
   312 0000022A B84500                  				mov		ax,69
   313 0000022D 50                      				push		ax
   314 0000022E B82101                  				mov		ax,289
   315 00000231 50                      				push		ax
   316 00000232 B84500                  				mov		ax,69
   317 00000235 50                      				push		ax
   318 00000236 E81C04                  				call		line
   319                                  			;right
   320 00000239 B82101                  				mov		ax,289
   321 0000023C 50                      				push		ax
   322 0000023D B84500                  				mov		ax,69
   323 00000240 50                      				push		ax
   324 00000241 B82101                  				mov		ax,289
   325 00000244 50                      				push		ax
   326 00000245 B81300                  				mov		ax,19
   327 00000248 50                      				push		ax
   328 00000249 E80904                  				call		line
   329                                  		;text
   330 0000024C B61A                        		mov     	dh,26			;linha 0-29
   331 0000024E B203                        		mov     	dl,3			;coluna 0-79
   332 00000250 8D1E[2700]              			lea bx, [footer_string]
   333 00000254 E82D00                  			call 	print_string
   334 00000257 43                      			inc		bx
   335 00000258 B61B                    			mov     	dh,27			;linha 0-29
   336 0000025A B203                        		mov     	dl,3			;coluna 0-79
   337 0000025C E82500                  			call 	print_string
   338                                  
   339                                  	;open file
   340 0000025F E83600                  		call open_file
   341                                  		;call close_file
   342                                  		back_main_loop:
   343 00000262 E90F00                  		jmp exit_program
   344                                  
   345                                  ErrorOpening:
   346 00000265 BA[6901]                	mov dx, OpenError ; exibe um erro
   347 00000268 B409                    	mov ah,09h      ; usando a função 09h
   348 0000026A CD21                    	int 21h         ; chama serviço do DOS
   349 0000026C B8014C                  	mov ax,4C01h        ; termina programa com um errorlevel =1 
   350 0000026F CD21                    	int 21h
   351 00000271 E90000                  	jmp exit_program
   352                                  
   353                                  exit_program:
   354 00000274 B408                    	mov    	ah,08h
   355 00000276 CD21                    	int     21h
   356 00000278 B400                    	mov  	ah,0   			; set video mode
   357 0000027A A0[0100]                	mov  	al,[modo_anterior]   	; modo anterior
   358 0000027D CD10                    	int  	10h
   359 0000027F B8004C                  	mov     ax,4c00h
   360 00000282 CD21                    	int     21h
   361                                  
   362                                  print_string:	
   363 00000284 E8D701                  	call	cursor
   364 00000287 8A07                    	mov     al,[bx]
   365 00000289 3C00                    	cmp 	al, 0       ; verifica se é o caractere nulo
   366 0000028B E8E701                  	call	caracter
   367 0000028E 43                      	inc     bx			;proximo caracter
   368 0000028F FEC2                    	inc		dl			;avanca a coluna
   369 00000291 8A07                    	mov     al,[bx]
   370 00000293 3C00                    	cmp 	al, 0       ; verifica se é o caractere nulo
   371 00000295 75ED                    	jne		print_string
   372 00000297 C3                      	ret
   373                                  
   374                                  open_file:
   375                                  	; Abrir o arquivo
   376 00000298 B43D                        	mov 	ah, 3Dh                   
   377 0000029A B000                        	mov 	al, 0                     
   378 0000029C 8B16[5A01]                  	mov 	dx, [file_name]             
   379 000002A0 CD21                        	int 	21h        
   380 000002A2 72C1                    		jc ErrorOpening     ; desvia se carry flag estiver ligada - erro!              
   381 000002A4 A3[6701]                		mov		[file_handle], ax
   382 000002A7 C706[6501]0000          		mov word[file_pointer_offset], 0
   383                                  		
   384 000002AD B9F900                  		mov 	cx, 249           ; quantidade de linhas
   385                                  		line_loop:
   386 000002B0 E84500                  			call file_read_line; carrega o buffer da linha
   387                                  			back_line_loop:
   388 000002B3 89CA                    			mov dx, cx
   389 000002B5 81C26400                			add dx, 100; ajustando posição na tela
   390 000002B9 51                      			push cx
   391 000002BA B9F900                  			mov cx, 249; quantidade de pixels na linha
   392                                  				draw_pixels:
   393 000002BD 52                      					push dx
   394 000002BE BBF900                  					mov bx, 249
   395 000002C1 29CB                    					sub bx, cx
   396 000002C3 8A87[6000]              					mov al, byte [buffer_line_1 + bx]
   397 000002C7 A2[5E00]                					mov [buffer_pixel], al
   398 000002CA E8E300                  					call convert_vga_scale
   399 000002CD 5A                      					pop dx
   400                                  					;plot pixel
   401 000002CE BB0D01                  						mov 	bx, 269
   402 000002D1 29CB                    						sub 	bx, cx
   403 000002D3 53                      						push 	bx
   404 000002D4 52                      						push 	dx  
   405 000002D5 E8BB01                  						call plot_xy
   406 000002D8 E2E3                    					loop draw_pixels               ; Repetir até copiar todos os bytes do buffer
   407 000002DA 59                      			pop cx
   408 000002DB E2D3                    			loop line_loop                  ; Continuar lendo do arquivo
   409 000002DD C3                      		ret
   410                                  		
   411                                  ErrorReading:
   412 000002DE BA[8301]                	mov dx,ReadError ; exibe um erro
   413 000002E1 B409                    	mov ah,09h      ; usando a função 09h
   414 000002E3 CD21                    	int 21h         ; chama serviço do DOS
   415 000002E5 B8024C                  	mov ax,4C02h        ; termina programa com um errorlevel =2
   416 000002E8 CD21                    	int 21h
   417 000002EA E987FF                  	jmp exit_program
   418                                  
   419                                  close_file:
   420                                      ; Fechar o arquivo
   421 000002ED B43E                        mov ah, 3Eh                    ; Função 3Eh - Fechar arquivo
   422 000002EF 8B1E[6701]                  mov bx, [file_handle]                     ; Identificador de arquivo
   423 000002F3 CD21                        int 0x21                       ; Chamar a interrupção 21h
   424 000002F5 E96AFF                  	jmp back_main_loop
   425                                  
   426                                  file_read_line:
   427                                  	; read 1 line
   428 000002F8 B43F                    		mov ah, 3Fh                    ; Função 3Fh - Ler do arquivo
   429 000002FA 8B1E[6701]              		mov bx, [file_handle]                     ; Identificador de arquivo
   430 000002FE B90100                  		mov cx, 1
   431 00000301 BA[5F00]                		mov dx, buffer
   432 00000304 CD21                    		int 21h                       ; Chamar a interrupção 21h
   433 00000306 72D6                    		jc ErrorReading     ; desvia se carry flag estiver ligada - erro!
   434 00000308 3D0000                  		cmp ax, 0
   435 0000030B 74E0                    		je close_file
   436                                  		;creating once line buffer
   437 0000030D A1[5F00]                		mov ax, [buffer]
   438 00000310 B9F900                  		mov cx, 249; quantidade de pixels na linha
   439                                  		line_loop_buffer:
   440 00000313 E82400                  			call convert_ascii_int
   441                                  			back_covertion:
   442 00000316 BBF900                  			mov bx, 249
   443 00000319 29CB                    			sub bx, cx
   444 0000031B 50                      			push ax
   445 0000031C A0[5E00]                			mov al, byte[buffer_pixel]
   446 0000031F 8887[6000]              			mov [buffer_line_1 + bx], al
   447 00000323 58                      			pop ax
   448 00000324 E2ED                    			loop line_loop_buffer
   449                                  		;fix file pointer for the next line
   450 00000326 B442                    		mov ah, 42h
   451 00000328 8B1E[6701]              		mov bx, [file_handle]
   452 0000032C 8B0E[6501]              		mov cx, [file_pointer_offset]
   453 00000330 B000                    		mov al, 0
   454 00000332 CD21                    		int 21h
   455 00000334 72A8                    		jc ErrorReading     ; desvia se carry flag estiver ligada - erro!
   456 00000336 E97AFF                  		jmp back_line_loop
   457 00000339 C3                      		ret	
   458                                  
   459                                  ;convert to int
   460                                  	convert_ascii_int:
   461 0000033A 50                      		push ax
   462 0000033B 3C20                    		cmp al, 20h
   463 0000033D 74AE                    		je close_file
   464 0000033F 40                      		inc ax
   465 00000340 3C20                    		cmp al, 20h
   466 00000342 740A                    		je convert_ascii_int_1
   467 00000344 40                      		inc ax
   468 00000345 3C20                    		cmp al, 20h
   469 00000347 7417                    		je convert_ascii_int_2
   470 00000349 40                      		inc ax
   471 0000034A 3C20                    		cmp al, 20h
   472 0000034C 7431                    		je convert_ascii_int_3
   473                                  		
   474                                  	convert_ascii_int_1:
   475 0000034E 58                      		pop ax
   476 0000034F 50                      		push ax
   477 00000350 2C00                    		sub al, 0                 ; Convert to numeric value
   478 00000352 A2[5E00]                		mov [buffer_pixel], al
   479 00000355 58                      		pop ax
   480 00000356 40                      		inc ax
   481 00000357 8106[6501]0200          		add word[file_pointer_offset], 2 
   482 0000035D E9B6FF                  		jmp		back_covertion
   483                                  
   484                                  	convert_ascii_int_2:
   485 00000360 58                      		pop ax
   486 00000361 50                      		push ax
   487 00000362 2C00                    		sub al, 0                 ; Convert to numeric value
   488 00000364 B30A                    		mov bl, 10
   489 00000366 F6E3                    		mul bl
   490 00000368 A2[5E00]                		mov [buffer_pixel], al
   491 0000036B 58                      		pop ax
   492 0000036C 40                      		inc ax
   493 0000036D 50                      		push ax
   494 0000036E 2C00                    		sub al, 0                 ; Convert to numeric value
   495 00000370 0006[5E00]              		add [buffer_pixel], al
   496 00000374 58                      		pop ax
   497 00000375 40                      		inc ax
   498 00000376 8106[6501]0300          		add word[file_pointer_offset], 3 
   499 0000037C E997FF                  		jmp		back_covertion
   500                                  
   501                                  	convert_ascii_int_3:
   502 0000037F 58                      	pop ax
   503 00000380 2C00                    	sub al, 0                 ; Convert to numeric value
   504 00000382 B364                    	mov bl, 100
   505 00000384 F6E3                    	mul bl
   506 00000386 C606[5E00]00            	mov byte[buffer_pixel], 0
   507 0000038B 0006[5E00]              	add [buffer_pixel], al
   508 0000038F 58                      	pop ax
   509 00000390 40                      	inc ax
   510 00000391 50                      	push ax
   511 00000392 2C00                    	sub al, 0                 ; Convert to numeric value
   512 00000394 B30A                    	mov bl, 10
   513 00000396 F6E3                    	mul bl
   514 00000398 0006[5E00]              	add [buffer_pixel], al
   515 0000039C 58                      	pop ax
   516 0000039D 40                      	inc ax
   517 0000039E 50                      	push ax
   518 0000039F 2C00                    	sub al, 0                 ; Convert to numeric value
   519 000003A1 0006[5E00]              	add [buffer_pixel], al
   520 000003A5 58                      	pop ax
   521 000003A6 40                      	inc ax
   522 000003A7 8106[6501]0400          	add word[file_pointer_offset], 4 
   523 000003AD E966FF                  	jmp		back_covertion
   524                                  
   525                                  
   526                                  ;convert to vga scale
   527                                  	convert_vga_scale:
   528 000003B0 B80000                  		mov ax, 0          ; Zerar o registrador AX
   529 000003B3 BB0000                  		mov bx, 0          ; Zerar o registrador BX
   530 000003B6 A0[5E00]                		mov al, byte[buffer_pixel]        ; Dividendo (valor a ser dividido)
   531 000003B9 B310                    		mov bl, 16          ; Divisor
   532 000003BB F6F3                    		div bl             ; Divide AX pelo divisor (BL)
   533 000003BD 3C00                    		cmp al, 0
   534 000003BF 743D                    		je	scale0
   535 000003C1 3C01                    		cmp al, 1
   536 000003C3 743F                    		je	scale1
   537 000003C5 3C02                    		cmp al, 2
   538 000003C7 7441                    		je	scale2
   539 000003C9 3C03                    		cmp al, 3
   540 000003CB 7443                    		je	scale3
   541 000003CD 3C04                    		cmp al, 4
   542 000003CF 7445                    		je	scale4
   543 000003D1 3C05                    		cmp al, 5
   544 000003D3 7447                    		je	scale5
   545 000003D5 3C06                    		cmp al, 6
   546 000003D7 7449                    		je	scale6
   547 000003D9 3C07                    		cmp al, 7
   548 000003DB 744B                    		je	scale7
   549 000003DD 3C08                    		cmp al, 8
   550 000003DF 744D                    		je	scale8
   551 000003E1 3C09                    		cmp al, 9
   552 000003E3 744F                    		je	scale9
   553 000003E5 3C0A                    		cmp al, 10
   554 000003E7 7451                    		je	scale10
   555 000003E9 3C0B                    		cmp al, 11
   556 000003EB 7453                    		je	scale11
   557 000003ED 3C0C                    		cmp al, 12
   558 000003EF 7455                    		je	scale12
   559 000003F1 3C0D                    		cmp al, 13
   560 000003F3 7457                    		je	scale13
   561 000003F5 3C0E                    		cmp al, 14
   562 000003F7 7459                    		je	scale14
   563 000003F9 3C0F                    		cmp al, 15
   564 000003FB 745B                    		je	scale15
   565 000003FD C3                      		ret
   566                                  
   567                                  	;convert scales
   568                                  		scale0:
   569 000003FE C606[0000]00            			mov byte[cor], preto
   570 00000403 C3                      			ret
   571                                  		scale1:
   572 00000404 C606[0000]08            			mov byte[cor], cinza
   573 00000409 C3                      			ret
   574                                  		scale2:
   575 0000040A C606[0000]01            			mov byte[cor], azul
   576 0000040F C3                      			ret
   577                                  		scale3:
   578 00000410 C606[0000]09            			mov byte[cor], azul_claro
   579 00000415 C3                      			ret
   580                                  		scale4:
   581 00000416 C606[0000]02            			mov byte[cor], verde
   582 0000041B C3                      			ret
   583                                  		scale5:
   584 0000041C C606[0000]0A            			mov byte[cor], verde_claro
   585 00000421 C3                      			ret
   586                                  		scale6:
   587 00000422 C606[0000]03            			mov byte[cor], cyan
   588 00000427 C3                      			ret
   589                                  		scale7:
   590 00000428 C606[0000]0B            			mov byte[cor], cyan_claro
   591 0000042D C3                      			ret
   592                                  		scale8:
   593 0000042E C606[0000]04            			mov byte[cor], vermelho
   594 00000433 C3                      			ret
   595                                  		scale9:
   596 00000434 C606[0000]0C            			mov byte[cor], rosa
   597 00000439 C3                      			ret
   598                                  		scale10:
   599 0000043A C606[0000]05            			mov byte[cor], magenta
   600 0000043F C3                      			ret
   601                                  		scale11:
   602 00000440 C606[0000]0D            			mov byte[cor], magenta_claro
   603 00000445 C3                      			ret
   604                                  		scale12:
   605 00000446 C606[0000]06            			mov byte[cor], marrom
   606 0000044B C3                      			ret
   607                                  		scale13:
   608 0000044C C606[0000]0E            			mov byte[cor], amarelo
   609 00000451 C3                      			ret
   610                                  		scale14:
   611 00000452 C606[0000]07            			mov byte[cor], branco
   612 00000457 C3                      			ret
   613                                  		scale15:
   614 00000458 C606[0000]0F            			mov byte[cor], branco_intenso
   615 0000045D C3                      			ret
   616                                  ;***************************************************************************
   617                                  ;
   618                                  ;   fun��o cursor
   619                                  ;
   620                                  ; dh = linha (0-29) e  dl=coluna  (0-79)
   621                                  cursor:
   622 0000045E 9C                      		pushf
   623 0000045F 50                      		push 		ax
   624 00000460 53                      		push 		bx
   625 00000461 51                      		push		cx
   626 00000462 52                      		push		dx
   627 00000463 56                      		push		si
   628 00000464 57                      		push		di
   629 00000465 55                      		push		bp
   630 00000466 B402                    		mov     	ah,2
   631 00000468 B700                    		mov     	bh,0
   632 0000046A CD10                    		int     	10h
   633 0000046C 5D                      		pop		bp
   634 0000046D 5F                      		pop		di
   635 0000046E 5E                      		pop		si
   636 0000046F 5A                      		pop		dx
   637 00000470 59                      		pop		cx
   638 00000471 5B                      		pop		bx
   639 00000472 58                      		pop		ax
   640 00000473 9D                      		popf
   641 00000474 C3                      		ret
   642                                  ;_____________________________________________________________________________
   643                                  ;
   644                                  ;   fun��o caracter escrito na posi��o do cursor
   645                                  ;
   646                                  ; al= caracter a ser escrito
   647                                  ; cor definida na variavel cor
   648                                  caracter:
   649 00000475 9C                      		pushf
   650 00000476 50                      		push 		ax
   651 00000477 53                      		push 		bx
   652 00000478 51                      		push		cx
   653 00000479 52                      		push		dx
   654 0000047A 56                      		push		si
   655 0000047B 57                      		push		di
   656 0000047C 55                      		push		bp
   657 0000047D B409                        		mov     	ah,9
   658 0000047F B700                        		mov     	bh,0
   659 00000481 B90100                      		mov     	cx,1
   660 00000484 8A1E[0000]                 		mov     	bl,[cor]
   661 00000488 CD10                        		int     	10h
   662 0000048A 5D                      		pop		bp
   663 0000048B 5F                      		pop		di
   664 0000048C 5E                      		pop		si
   665 0000048D 5A                      		pop		dx
   666 0000048E 59                      		pop		cx
   667 0000048F 5B                      		pop		bx
   668 00000490 58                      		pop		ax
   669 00000491 9D                      		popf
   670 00000492 C3                      		ret
   671                                  ;_____________________________________________________________________________
   672                                  ;
   673                                  ;   fun��o plot_xy
   674                                  ;
   675                                  ; push x; push y; call plot_xy;  (x<639, y<479)
   676                                  ; cor definida na variavel cor
   677                                  plot_xy:
   678 00000493 55                      		push		bp
   679 00000494 89E5                    		mov		bp,sp
   680 00000496 9C                      		pushf
   681 00000497 50                      		push 		ax
   682 00000498 53                      		push 		bx
   683 00000499 51                      		push		cx
   684 0000049A 52                      		push		dx
   685 0000049B 56                      		push		si
   686 0000049C 57                      		push		di
   687 0000049D B40C                    	    mov     	ah,0ch
   688 0000049F A0[0000]                	    mov     	al,[cor]
   689 000004A2 B700                    	    mov     	bh,0
   690 000004A4 BADF01                  	    mov     	dx,479
   691 000004A7 2B5604                  		sub		dx,[bp+4]
   692 000004AA 8B4E06                  	    mov     	cx,[bp+6]
   693 000004AD CD10                    	    int     	10h
   694 000004AF 5F                      		pop		di
   695 000004B0 5E                      		pop		si
   696 000004B1 5A                      		pop		dx
   697 000004B2 59                      		pop		cx
   698 000004B3 5B                      		pop		bx
   699 000004B4 58                      		pop		ax
   700 000004B5 9D                      		popf
   701 000004B6 5D                      		pop		bp
   702 000004B7 C20400                  		ret		4
   703                                  ;_____________________________________________________________________________
   704                                  ;    fun��o circle
   705                                  ;	 push xc; push yc; push r; call circle;  (xc+r<639,yc+r<479)e(xc-r>0,yc-r>0)
   706                                  ; cor definida na variavel cor
   707                                  circle:
   708 000004BA 55                      	push 	bp
   709 000004BB 89E5                    	mov	 	bp,sp
   710 000004BD 9C                      	pushf                        ;coloca os flags na pilha
   711 000004BE 50                      	push 	ax
   712 000004BF 53                      	push 	bx
   713 000004C0 51                      	push	cx
   714 000004C1 52                      	push	dx
   715 000004C2 56                      	push	si
   716 000004C3 57                      	push	di
   717                                  	
   718 000004C4 8B4608                  	mov		ax,[bp+8]    ; resgata xc
   719 000004C7 8B5E06                  	mov		bx,[bp+6]    ; resgata yc
   720 000004CA 8B4E04                  	mov		cx,[bp+4]    ; resgata r
   721                                  	
   722 000004CD 89DA                    	mov 	dx,bx	
   723 000004CF 01CA                    	add		dx,cx       ;ponto extremo superior
   724 000004D1 50                      	push    ax			
   725 000004D2 52                      	push	dx
   726 000004D3 E8BDFF                  	call plot_xy
   727                                  	
   728 000004D6 89DA                    	mov		dx,bx
   729 000004D8 29CA                    	sub		dx,cx       ;ponto extremo inferior
   730 000004DA 50                      	push    ax			
   731 000004DB 52                      	push	dx
   732 000004DC E8B4FF                  	call plot_xy
   733                                  	
   734 000004DF 89C2                    	mov 	dx,ax	
   735 000004E1 01CA                    	add		dx,cx       ;ponto extremo direita
   736 000004E3 52                      	push    dx			
   737 000004E4 53                      	push	bx
   738 000004E5 E8ABFF                  	call plot_xy
   739                                  	
   740 000004E8 89C2                    	mov		dx,ax
   741 000004EA 29CA                    	sub		dx,cx       ;ponto extremo esquerda
   742 000004EC 52                      	push    dx			
   743 000004ED 53                      	push	bx
   744 000004EE E8A2FF                  	call plot_xy
   745                                  		
   746 000004F1 89CF                    	mov		di,cx
   747 000004F3 81EF0100                	sub		di,1	 ;di=r-1
   748 000004F7 BA0000                  	mov		dx,0  	;dx ser� a vari�vel x. cx � a variavel y
   749                                  	
   750                                  ;aqui em cima a l�gica foi invertida, 1-r => r-1
   751                                  ;e as compara��es passaram a ser jl => jg, assim garante 
   752                                  ;valores positivos para d
   753                                  
   754                                  stay:				;loop
   755 000004FA 89FE                    	mov		si,di
   756 000004FC 81FE0000                	cmp		si,0
   757 00000500 7F0E                    	jg		inf       ;caso d for menor que 0, seleciona pixel superior (n�o  salta)
   758 00000502 89D6                    	mov		si,dx		;o jl � importante porque trata-se de conta com sinal
   759 00000504 D1E6                    	sal		si,1		;multiplica por doi (shift arithmetic left)
   760 00000506 81C60300                	add		si,3
   761 0000050A 01F7                    	add		di,si     ;nesse ponto d=d+2*dx+3
   762 0000050C 42                      	inc		dx		;incrementa dx
   763 0000050D E90E00                  	jmp		plotar
   764                                  inf:	
   765 00000510 89D6                    	mov		si,dx
   766 00000512 29CE                    	sub		si,cx  		;faz x - y (dx-cx), e salva em di 
   767 00000514 D1E6                    	sal		si,1
   768 00000516 81C60500                	add		si,5
   769 0000051A 01F7                    	add		di,si		;nesse ponto d=d+2*(dx-cx)+5
   770 0000051C 42                      	inc		dx		;incrementa x (dx)
   771 0000051D 49                      	dec		cx		;decrementa y (cx)
   772                                  	
   773                                  plotar:	
   774 0000051E 89D6                    	mov		si,dx
   775 00000520 01C6                    	add		si,ax
   776 00000522 56                      	push    si			;coloca a abcisa x+xc na pilha
   777 00000523 89CE                    	mov		si,cx
   778 00000525 01DE                    	add		si,bx
   779 00000527 56                      	push    si			;coloca a ordenada y+yc na pilha
   780 00000528 E868FF                  	call plot_xy		;toma conta do segundo octante
   781 0000052B 89C6                    	mov		si,ax
   782 0000052D 01D6                    	add		si,dx
   783 0000052F 56                      	push    si			;coloca a abcisa xc+x na pilha
   784 00000530 89DE                    	mov		si,bx
   785 00000532 29CE                    	sub		si,cx
   786 00000534 56                      	push    si			;coloca a ordenada yc-y na pilha
   787 00000535 E85BFF                  	call plot_xy		;toma conta do s�timo octante
   788 00000538 89C6                    	mov		si,ax
   789 0000053A 01CE                    	add		si,cx
   790 0000053C 56                      	push    si			;coloca a abcisa xc+y na pilha
   791 0000053D 89DE                    	mov		si,bx
   792 0000053F 01D6                    	add		si,dx
   793 00000541 56                      	push    si			;coloca a ordenada yc+x na pilha
   794 00000542 E84EFF                  	call plot_xy		;toma conta do segundo octante
   795 00000545 89C6                    	mov		si,ax
   796 00000547 01CE                    	add		si,cx
   797 00000549 56                      	push    si			;coloca a abcisa xc+y na pilha
   798 0000054A 89DE                    	mov		si,bx
   799 0000054C 29D6                    	sub		si,dx
   800 0000054E 56                      	push    si			;coloca a ordenada yc-x na pilha
   801 0000054F E841FF                  	call plot_xy		;toma conta do oitavo octante
   802 00000552 89C6                    	mov		si,ax
   803 00000554 29D6                    	sub		si,dx
   804 00000556 56                      	push    si			;coloca a abcisa xc-x na pilha
   805 00000557 89DE                    	mov		si,bx
   806 00000559 01CE                    	add		si,cx
   807 0000055B 56                      	push    si			;coloca a ordenada yc+y na pilha
   808 0000055C E834FF                  	call plot_xy		;toma conta do terceiro octante
   809 0000055F 89C6                    	mov		si,ax
   810 00000561 29D6                    	sub		si,dx
   811 00000563 56                      	push    si			;coloca a abcisa xc-x na pilha
   812 00000564 89DE                    	mov		si,bx
   813 00000566 29CE                    	sub		si,cx
   814 00000568 56                      	push    si			;coloca a ordenada yc-y na pilha
   815 00000569 E827FF                  	call plot_xy		;toma conta do sexto octante
   816 0000056C 89C6                    	mov		si,ax
   817 0000056E 29CE                    	sub		si,cx
   818 00000570 56                      	push    si			;coloca a abcisa xc-y na pilha
   819 00000571 89DE                    	mov		si,bx
   820 00000573 29D6                    	sub		si,dx
   821 00000575 56                      	push    si			;coloca a ordenada yc-x na pilha
   822 00000576 E81AFF                  	call plot_xy		;toma conta do quinto octante
   823 00000579 89C6                    	mov		si,ax
   824 0000057B 29CE                    	sub		si,cx
   825 0000057D 56                      	push    si			;coloca a abcisa xc-y na pilha
   826 0000057E 89DE                    	mov		si,bx
   827 00000580 01D6                    	add		si,dx
   828 00000582 56                      	push    si			;coloca a ordenada yc-x na pilha
   829 00000583 E80DFF                  	call plot_xy		;toma conta do quarto octante
   830                                  	
   831 00000586 39D1                    	cmp		cx,dx
   832 00000588 7203                    	jb		fim_circle  ;se cx (y) est� abaixo de dx (x), termina     
   833 0000058A E96DFF                  	jmp		stay		;se cx (y) est� acima de dx (x), continua no loop
   834                                  	
   835                                  	
   836                                  fim_circle:
   837 0000058D 5F                      	pop		di
   838 0000058E 5E                      	pop		si
   839 0000058F 5A                      	pop		dx
   840 00000590 59                      	pop		cx
   841 00000591 5B                      	pop		bx
   842 00000592 58                      	pop		ax
   843 00000593 9D                      	popf
   844 00000594 5D                      	pop		bp
   845 00000595 C20600                  	ret		6
   846                                  ;-----------------------------------------------------------------------------
   847                                  ;    fun��o full_circle
   848                                  ;	 push xc; push yc; push r; call full_circle;  (xc+r<639,yc+r<479)e(xc-r>0,yc-r>0)
   849                                  ; cor definida na variavel cor					  
   850                                  full_circle:
   851 00000598 55                      	push 	bp
   852 00000599 89E5                    	mov	 	bp,sp
   853 0000059B 9C                      	pushf                        ;coloca os flags na pilha
   854 0000059C 50                      	push 	ax
   855 0000059D 53                      	push 	bx
   856 0000059E 51                      	push	cx
   857 0000059F 52                      	push	dx
   858 000005A0 56                      	push	si
   859 000005A1 57                      	push	di
   860                                  
   861 000005A2 8B4608                  	mov		ax,[bp+8]    ; resgata xc
   862 000005A5 8B5E06                  	mov		bx,[bp+6]    ; resgata yc
   863 000005A8 8B4E04                  	mov		cx,[bp+4]    ; resgata r
   864                                  	
   865 000005AB 89DE                    	mov		si,bx
   866 000005AD 29CE                    	sub		si,cx
   867 000005AF 50                      	push    ax			;coloca xc na pilha			
   868 000005B0 56                      	push	si			;coloca yc-r na pilha
   869 000005B1 89DE                    	mov		si,bx
   870 000005B3 01CE                    	add		si,cx
   871 000005B5 50                      	push	ax		;coloca xc na pilha
   872 000005B6 56                      	push	si		;coloca yc+r na pilha
   873 000005B7 E89B00                  	call line
   874                                  	
   875                                  		
   876 000005BA 89CF                    	mov		di,cx
   877 000005BC 81EF0100                	sub		di,1	 ;di=r-1
   878 000005C0 BA0000                  	mov		dx,0  	;dx ser� a vari�vel x. cx � a variavel y
   879                                  	
   880                                  ;aqui em cima a l�gica foi invertida, 1-r => r-1
   881                                  ;e as compara��es passaram a ser jl => jg, assim garante 
   882                                  ;valores positivos para d
   883                                  
   884                                  stay_full:				;loop
   885 000005C3 89FE                    	mov		si,di
   886 000005C5 81FE0000                	cmp		si,0
   887 000005C9 7F0E                    	jg		inf_full       ;caso d for menor que 0, seleciona pixel superior (n�o  salta)
   888 000005CB 89D6                    	mov		si,dx		;o jl � importante porque trata-se de conta com sinal
   889 000005CD D1E6                    	sal		si,1		;multiplica por doi (shift arithmetic left)
   890 000005CF 81C60300                	add		si,3
   891 000005D3 01F7                    	add		di,si     ;nesse ponto d=d+2*dx+3
   892 000005D5 42                      	inc		dx		;incrementa dx
   893 000005D6 E90E00                  	jmp		plotar_full
   894                                  inf_full:	
   895 000005D9 89D6                    	mov		si,dx
   896 000005DB 29CE                    	sub		si,cx  		;faz x - y (dx-cx), e salva em di 
   897 000005DD D1E6                    	sal		si,1
   898 000005DF 81C60500                	add		si,5
   899 000005E3 01F7                    	add		di,si		;nesse ponto d=d+2*(dx-cx)+5
   900 000005E5 42                      	inc		dx		;incrementa x (dx)
   901 000005E6 49                      	dec		cx		;decrementa y (cx)
   902                                  	
   903                                  plotar_full:	
   904 000005E7 89C6                    	mov		si,ax
   905 000005E9 01CE                    	add		si,cx
   906 000005EB 56                      	push	si		;coloca a abcisa y+xc na pilha			
   907 000005EC 89DE                    	mov		si,bx
   908 000005EE 29D6                    	sub		si,dx
   909 000005F0 56                      	push    si		;coloca a ordenada yc-x na pilha
   910 000005F1 89C6                    	mov		si,ax
   911 000005F3 01CE                    	add		si,cx
   912 000005F5 56                      	push	si		;coloca a abcisa y+xc na pilha	
   913 000005F6 89DE                    	mov		si,bx
   914 000005F8 01D6                    	add		si,dx
   915 000005FA 56                      	push    si		;coloca a ordenada yc+x na pilha	
   916 000005FB E85700                  	call 	line
   917                                  	
   918 000005FE 89C6                    	mov		si,ax
   919 00000600 01D6                    	add		si,dx
   920 00000602 56                      	push	si		;coloca a abcisa xc+x na pilha			
   921 00000603 89DE                    	mov		si,bx
   922 00000605 29CE                    	sub		si,cx
   923 00000607 56                      	push    si		;coloca a ordenada yc-y na pilha
   924 00000608 89C6                    	mov		si,ax
   925 0000060A 01D6                    	add		si,dx
   926 0000060C 56                      	push	si		;coloca a abcisa xc+x na pilha	
   927 0000060D 89DE                    	mov		si,bx
   928 0000060F 01CE                    	add		si,cx
   929 00000611 56                      	push    si		;coloca a ordenada yc+y na pilha	
   930 00000612 E84000                  	call	line
   931                                  	
   932 00000615 89C6                    	mov		si,ax
   933 00000617 29D6                    	sub		si,dx
   934 00000619 56                      	push	si		;coloca a abcisa xc-x na pilha			
   935 0000061A 89DE                    	mov		si,bx
   936 0000061C 29CE                    	sub		si,cx
   937 0000061E 56                      	push    si		;coloca a ordenada yc-y na pilha
   938 0000061F 89C6                    	mov		si,ax
   939 00000621 29D6                    	sub		si,dx
   940 00000623 56                      	push	si		;coloca a abcisa xc-x na pilha	
   941 00000624 89DE                    	mov		si,bx
   942 00000626 01CE                    	add		si,cx
   943 00000628 56                      	push    si		;coloca a ordenada yc+y na pilha	
   944 00000629 E82900                  	call	line
   945                                  	
   946 0000062C 89C6                    	mov		si,ax
   947 0000062E 29CE                    	sub		si,cx
   948 00000630 56                      	push	si		;coloca a abcisa xc-y na pilha			
   949 00000631 89DE                    	mov		si,bx
   950 00000633 29D6                    	sub		si,dx
   951 00000635 56                      	push    si		;coloca a ordenada yc-x na pilha
   952 00000636 89C6                    	mov		si,ax
   953 00000638 29CE                    	sub		si,cx
   954 0000063A 56                      	push	si		;coloca a abcisa xc-y na pilha	
   955 0000063B 89DE                    	mov		si,bx
   956 0000063D 01D6                    	add		si,dx
   957 0000063F 56                      	push    si		;coloca a ordenada yc+x na pilha	
   958 00000640 E81200                  	call	line
   959                                  	
   960 00000643 39D1                    	cmp		cx,dx
   961 00000645 7203                    	jb		fim_full_circle  ;se cx (y) est� abaixo de dx (x), termina     
   962 00000647 E979FF                  	jmp		stay_full		;se cx (y) est� acima de dx (x), continua no loop
   963                                  	
   964                                  	
   965                                  fim_full_circle:
   966 0000064A 5F                      	pop		di
   967 0000064B 5E                      	pop		si
   968 0000064C 5A                      	pop		dx
   969 0000064D 59                      	pop		cx
   970 0000064E 5B                      	pop		bx
   971 0000064F 58                      	pop		ax
   972 00000650 9D                      	popf
   973 00000651 5D                      	pop		bp
   974 00000652 C20600                  	ret		6
   975                                  ;-----------------------------------------------------------------------------
   976                                  ;
   977                                  ;   fun��o line
   978                                  ;
   979                                  ; push x1; push y1; push x2; push y2; call line;  (x<639, y<479)
   980                                  line:
   981 00000655 55                      		push		bp
   982 00000656 89E5                    		mov		bp,sp
   983 00000658 9C                      		pushf                        ;coloca os flags na pilha
   984 00000659 50                      		push 		ax
   985 0000065A 53                      		push 		bx
   986 0000065B 51                      		push		cx
   987 0000065C 52                      		push		dx
   988 0000065D 56                      		push		si
   989 0000065E 57                      		push		di
   990 0000065F 8B460A                  		mov		ax,[bp+10]   ; resgata os valores das coordenadas
   991 00000662 8B5E08                  		mov		bx,[bp+8]    ; resgata os valores das coordenadas
   992 00000665 8B4E06                  		mov		cx,[bp+6]    ; resgata os valores das coordenadas
   993 00000668 8B5604                  		mov		dx,[bp+4]    ; resgata os valores das coordenadas
   994 0000066B 39C8                    		cmp		ax,cx
   995 0000066D 7408                    		je		line2
   996 0000066F 721C                    		jb		line1
   997 00000671 91                      		xchg		ax,cx
   998 00000672 87DA                    		xchg		bx,dx
   999 00000674 E91600                  		jmp		line1
  1000                                  line2:		; deltax=0
  1001 00000677 39D3                    		cmp		bx,dx  ;subtrai dx de bx
  1002 00000679 7202                    		jb		line3
  1003 0000067B 87DA                    		xchg		bx,dx        ;troca os valores de bx e dx entre eles
  1004                                  line3:	; dx > bx
  1005 0000067D 50                      		push		ax
  1006 0000067E 53                      		push		bx
  1007 0000067F E811FE                  		call 		plot_xy
  1008 00000682 39D3                    		cmp		bx,dx
  1009 00000684 7503                    		jne		line31
  1010 00000686 E9C600                  		jmp		fim_line
  1011 00000689 43                      line31:		inc		bx
  1012 0000068A E9F0FF                  		jmp		line3
  1013                                  ;deltax <>0
  1014                                  line1:
  1015                                  ; comparar m�dulos de deltax e deltay sabendo que cx>ax
  1016                                  	; cx > ax
  1017 0000068D 51                      		push		cx
  1018 0000068E 29C1                    		sub		cx,ax
  1019 00000690 890E[0600]              		mov		[deltax],cx
  1020 00000694 59                      		pop		cx
  1021 00000695 52                      		push		dx
  1022 00000696 29DA                    		sub		dx,bx
  1023 00000698 7702                    		ja		line32
  1024 0000069A F7DA                    		neg		dx
  1025                                  line32:		
  1026 0000069C 8916[0800]              		mov		[deltay],dx
  1027 000006A0 5A                      		pop		dx
  1028                                  
  1029 000006A1 50                      		push		ax
  1030 000006A2 A1[0600]                		mov		ax,[deltax]
  1031 000006A5 3B06[0800]              		cmp		ax,[deltay]
  1032 000006A9 58                      		pop		ax
  1033 000006AA 724D                    		jb		line5
  1034                                  
  1035                                  	; cx > ax e deltax>deltay
  1036 000006AC 51                      		push		cx
  1037 000006AD 29C1                    		sub		cx,ax
  1038 000006AF 890E[0600]              		mov		[deltax],cx
  1039 000006B3 59                      		pop		cx
  1040 000006B4 52                      		push		dx
  1041 000006B5 29DA                    		sub		dx,bx
  1042 000006B7 8916[0800]              		mov		[deltay],dx
  1043 000006BB 5A                      		pop		dx
  1044                                  
  1045 000006BC 89C6                    		mov		si,ax
  1046                                  line4:
  1047 000006BE 50                      		push		ax
  1048 000006BF 52                      		push		dx
  1049 000006C0 56                      		push		si
  1050 000006C1 29C6                    		sub		si,ax	;(x-x1)
  1051 000006C3 A1[0800]                		mov		ax,[deltay]
  1052 000006C6 F7EE                    		imul		si
  1053 000006C8 8B36[0600]              		mov		si,[deltax]		;arredondar
  1054 000006CC D1EE                    		shr		si,1
  1055                                  ; se numerador (DX)>0 soma se <0 subtrai
  1056 000006CE 81FA0000                		cmp		dx,0
  1057 000006D2 7C09                    		jl		ar1
  1058 000006D4 01F0                    		add		ax,si
  1059 000006D6 81D20000                		adc		dx,0
  1060 000006DA E90600                  		jmp		arc1
  1061 000006DD 29F0                    ar1:		sub		ax,si
  1062 000006DF 81DA0000                		sbb		dx,0
  1063                                  arc1:
  1064 000006E3 F73E[0600]              		idiv		word [deltax]
  1065 000006E7 01D8                    		add		ax,bx
  1066 000006E9 5E                      		pop		si
  1067 000006EA 56                      		push		si
  1068 000006EB 50                      		push		ax
  1069 000006EC E8A4FD                  		call		plot_xy
  1070 000006EF 5A                      		pop		dx
  1071 000006F0 58                      		pop		ax
  1072 000006F1 39CE                    		cmp		si,cx
  1073 000006F3 745A                    		je		fim_line
  1074 000006F5 46                      		inc		si
  1075 000006F6 E9C5FF                  		jmp		line4
  1076                                  
  1077 000006F9 39D3                    line5:		cmp		bx,dx
  1078 000006FB 7203                    		jb 		line7
  1079 000006FD 91                      		xchg		ax,cx
  1080 000006FE 87DA                    		xchg		bx,dx
  1081                                  line7:
  1082 00000700 51                      		push		cx
  1083 00000701 29C1                    		sub		cx,ax
  1084 00000703 890E[0600]              		mov		[deltax],cx
  1085 00000707 59                      		pop		cx
  1086 00000708 52                      		push		dx
  1087 00000709 29DA                    		sub		dx,bx
  1088 0000070B 8916[0800]              		mov		[deltay],dx
  1089 0000070F 5A                      		pop		dx
  1090                                  
  1091                                  
  1092                                  
  1093 00000710 89DE                    		mov		si,bx
  1094                                  line6:
  1095 00000712 52                      		push		dx
  1096 00000713 56                      		push		si
  1097 00000714 50                      		push		ax
  1098 00000715 29DE                    		sub		si,bx	;(y-y1)
  1099 00000717 A1[0600]                		mov		ax,[deltax]
  1100 0000071A F7EE                    		imul		si
  1101 0000071C 8B36[0800]              		mov		si,[deltay]		;arredondar
  1102 00000720 D1EE                    		shr		si,1
  1103                                  ; se numerador (DX)>0 soma se <0 subtrai
  1104 00000722 81FA0000                		cmp		dx,0
  1105 00000726 7C09                    		jl		ar2
  1106 00000728 01F0                    		add		ax,si
  1107 0000072A 81D20000                		adc		dx,0
  1108 0000072E E90600                  		jmp		arc2
  1109 00000731 29F0                    ar2:		sub		ax,si
  1110 00000733 81DA0000                		sbb		dx,0
  1111                                  arc2:
  1112 00000737 F73E[0800]              		idiv		word [deltay]
  1113 0000073B 89C7                    		mov		di,ax
  1114 0000073D 58                      		pop		ax
  1115 0000073E 01C7                    		add		di,ax
  1116 00000740 5E                      		pop		si
  1117 00000741 57                      		push		di
  1118 00000742 56                      		push		si
  1119 00000743 E84DFD                  		call		plot_xy
  1120 00000746 5A                      		pop		dx
  1121 00000747 39D6                    		cmp		si,dx
  1122 00000749 7404                    		je		fim_line
  1123 0000074B 46                      		inc		si
  1124 0000074C E9C3FF                  		jmp		line6
  1125                                  
  1126                                  fim_line:
  1127 0000074F 5F                      		pop		di
  1128 00000750 5E                      		pop		si
  1129 00000751 5A                      		pop		dx
  1130 00000752 59                      		pop		cx
  1131 00000753 5B                      		pop		bx
  1132 00000754 58                      		pop		ax
  1133 00000755 9D                      		popf
  1134 00000756 5D                      		pop		bp
  1135 00000757 C20800                  		ret		8
  1136                                  ;*******************************************************************
  1137                                  segment data
  1138                                  
  1139 00000000 0F                      cor		db		branco_intenso
  1140                                  
  1141                                  ;	I R G B COR
  1142                                  ;	0 0 0 0 preto
  1143                                  ;	0 0 0 1 azul
  1144                                  ;	0 0 1 0 verde
  1145                                  ;	0 0 1 1 cyan
  1146                                  ;	0 1 0 0 vermelho
  1147                                  ;	0 1 0 1 magenta
  1148                                  ;	0 1 1 0 marrom
  1149                                  ;	0 1 1 1 branco
  1150                                  ;	1 0 0 0 cinza
  1151                                  ;	1 0 0 1 azul claro
  1152                                  ;	1 0 1 0 verde claro
  1153                                  ;	1 0 1 1 cyan claro
  1154                                  ;	1 1 0 0 rosa
  1155                                  ;	1 1 0 1 magenta claro
  1156                                  ;	1 1 1 0 amarelo
  1157                                  ;	1 1 1 1 branco intenso
  1158                                  
  1159                                  preto		equ		0
  1160                                  azul		equ		1
  1161                                  verde		equ		2
  1162                                  cyan		equ		3
  1163                                  vermelho	equ		4
  1164                                  magenta		equ		5
  1165                                  marrom		equ		6
  1166                                  branco		equ		7
  1167                                  cinza		equ		8
  1168                                  azul_claro	equ		9
  1169                                  verde_claro	equ		10
  1170                                  cyan_claro	equ		11
  1171                                  rosa		equ		12
  1172                                  magenta_claro	equ		13
  1173                                  amarelo		equ		14
  1174                                  branco_intenso	equ		15
  1175                                  
  1176 00000001 00                      modo_anterior	db		0
  1177 00000002 0000                    linha   	dw  		0
  1178 00000004 0000                    coluna  	dw  		0
  1179 00000006 0000                    deltax		dw		0
  1180 00000008 0000                    deltay		dw		0
  1181                                  
  1182 0000000A 416272697200            btn_string_open     db      'Abrir',0 
  1183 00000010 4C425000                btn_string_LBP     db      'LBP',0
  1184 00000014 4869737400              btn_string_Hist     db      'Hist',0
  1185 00000019 48697374004C425000      btn_string_HistLBP     db      'Hist',0,'LBP',0
  1186 00000022 5361697200              btn_string_exit     db      'Sair',0
  1187 00000027 4C75636173204D616E-     footer_string       db      'Lucas Manfioletti turma 6.1',0, 'Sistemas Embarcados 2023/1',0
  1188 00000030 66696F6C6574746920-
  1189 00000039 7475726D6120362E31-
  1190 00000042 0053697374656D6173-
  1191 0000004B 20456D626172636164-
  1192 00000054 6F7320323032332F31-
  1193 0000005D 00                 
  1194                                  
  1195 0000005E 00                      buffer_pixel 	db		0
  1196 0000005F 00                      buffer db 0
  1197 00000060 11<rept>                buffer_line_1 times 250 db 17
  1198 0000015A 696D6167656D2E7478-     file_name		db		"imagem.txt", 0
  1199 00000163 7400               
  1200 00000165 0000                    file_pointer_offset		dw	0
  1201 00000167 0000                    file_handle		dw	0
  1202 00000169 4F636F727265752075-     OpenError DB "Ocorreu um erro(abrindo)!$"
  1203 00000172 6D206572726F286162-
  1204 0000017B 72696E646F292124   
  1205 00000183 4F636F727265752075-     ReadError DB "Ocorreu um erro(lendo)!$"
  1206 0000018C 6D206572726F286C65-
  1207 00000195 6E646F292124       
  1208                                  ;*************************************************************************
  1209                                  segment stack stack
  1210 00000000 <res 00000200>              		resb 		512
  1211                                  stacktop:
